<?php include ('./header.php'); ?>
<title>Login - Inholland Forum</title>
<section id="login">
    <form action="index.php" method="POST" class="form-signin"> 
        <h1 class="h3 mb-3 font-weight-normal">Please sign in</h1>
        <label for="username" class="sr-only">Enter Username</label>
        <input type="username" name="username" id="username" class="form-control" placeholder="Enter Username" required="" autofocus="" wfd-id="id0">
        <label for="email" class="sr-only">Enter Email address</label>
        <input type="email" name="email" id="email" class="form-control" placeholder="Enter Email address" required="" autofocus="" wfd-id="id0">
        <label for="password" class="sr-only">Password</label>
        <input type="password" name="password" id="password" class="form-control" placeholder="Enter Password" required="" wfd-id="id1">
        <button class="btn btn-lg btn-primary btn-block" type="submit">Sign in</button>
        <p class="mt-5 mb-3 text-muted">Â© 2017-2018</p>
    </form>
</section>
<?php include ('./footer.php'); ?>

    public function register() {
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            $_POST = filter_input_array(INPUT_POST, FILTER_SANITIZE_STRING);
            $username = $_POST['username'];
            $password = $_POST['password'];
            $email = $_POST['email'];
            if (!$this->checkForErrors($username, $password, $email)) {
                $this->userService->insert($username, $password, $email);
                header("Location: /");
            }
        } 
    }
    function checkForErrors($username, $password, $email) {
        if (empty($username)) {
            $errorMessage = "Username is required";
        }
        elseif (empty($email)) {
            $errorMessage = "Email is required";
        }
        elseif (empty($password)) {
            $errorMessage = "Password is required";
        }
        elseif ($this->userService->isValidEmail($email) == false) {
            $errorMessage = "Email is not valid";
        }
        elseif ($this->userService->isUniqueUsername($username) == false) {
            $errorMessage = "Username already exists";
        }
        elseif ($this->userService->isUniqueEmail($email) == false) {
            $errorMessage = "Email already exists";
        }
        else{
            return false;
        }
        echo $errorMessage;
        return true;
    }
<?php
require __DIR__ . '/../repositories/boardrepository.php';
require __DIR__ . '/../repositories/userrepository.php';


class UserService {
    public function getAll() {
        // retrieve data
        $repository = new BoardRepository();
        $boards = $repository->getAll();
        return $boards;
    function isValidEmail($email) {
        if (filter_var($email, FILTER_VALIDATE_EMAIL)) {
            echo "The email address is valid.";
        } else {
            echo "The email address is not valid.";
        }
    }
    public function getBoardById($boardId) {
        // retrieve data
        $repository = new BoardRepository();
        $board = $repository->getBoardById($boardId);
        return $board;
    function isUniqueUsername($username) {
        $repository = new UserRepository();
        $user = $repository->isUniqueUsername($username);
        if ($user) {
            return true;
        } else {
            echo "Username already exists";
        }
    }
    public function getBoardIdWithName($boardName) {
        // retrieve data
        $repository = new BoardRepository();
        $boardId = $repository->getBoardIdWithName($boardName);
        return $boardId;
    }
    function isUniqueEmail($email)
    {
        $repository = new UserRepository();
        $user = $repository->isUniqueEmail($email);
        if ($user) {
            return true;
        } else {
            echo "Email already exists";
        }
    }
    public function insert($username, $plainPassword, $email) {
        
        $repository = new UserRepository();
        $username = $this->isUniqueUsername($username);
        $email = $this->isUniqueEmail($email);
        $hashedPassword = $this->hashPassword($plainPassword);
        $repository->insert($username, $hashedPassword, $email);       
    }

    public function insert($board) {
        // retrieve data
        $repository = new BoardRepository();
        $repository->insert($board);        
    function hashPassword($plainPassword) {
        return password_hash($plainPassword, PASSWORD_DEFAULT);
    }
    function verifyPassword($plainPassword) {
        return password_hash($plainPassword, PASSWORD_DEFAULT);
    }

}
<?php
require __DIR__ . '/repository.php';
require __DIR__ . '/../models/user.php';

class UserRepository extends Repository
{
        function getAll()
        function insert($username, $password, $email)
        {
                $stmt = $this->connection->prepare("INSERT into users VALUES (username, email, password, joined_at) 
                VALUES (:username, :email, :password, now())");
                $stmt->bindParam(':username', $username);
                $stmt->bindParam(':email', $email);
                $stmt->bindParam(':password', $password);

                $stmt = $this->connection->prepare("SELECT * FROM boards");
                $stmt->execute();

                $stmt->setFetchMode(PDO::FETCH_CLASS, 'Board');
                $boards = $stmt->fetchAll();

                return $boards;

        }
        function getBoardById($boardId)
        {

                $stmt = $this->connection->prepare("SELECT * FROM boards WHERE board_id = ?");
                $stmt->execute([$boardId]);

                $stmt->setFetchMode(PDO::FETCH_CLASS, 'Board');
                $board = $stmt->fetch();

                return $board;
        }

        function isUniqueUsername($username) {
                $stmt = $this->connection->prepare("SELECT * FROM users WHERE username = ?");
                $stmt->execute([$username]);
                $result = $stmt->get_result();
                return $result->num_rows === 0;
        }
        function getBoardIdWithName(string $boardName)
        {

                $stmt = $this->connection->prepare("SELECT board_id FROM boards WHERE board_name = ?");
                $stmt->execute([$boardName]);

                $stmt->setFetchMode(PDO::FETCH_COLUMN, 0);
                $boardId = $stmt->fetch();

                return $boardId;

        }

        function insert($board)
        {
                $stmt = $this->connection->prepare("INSERT into boards (board_name) VALUES (?)");

                $stmt->execute([$board->getBoardName()]);

        function isUniqueEmail($email){
                $stmt = $this->connection->prepare("SELECT * FROM users WHERE email = ?");
                $stmt->execute([$email]);
                $result = $stmt->get_result();
                return $result->num_rows === 0;
        }
}   }