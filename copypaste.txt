        <?php if(isset($errorMessage) && !empty($errorMessage)): ?>
            <p class="alert alert-danger" role="alert">
                <?php echo htmlspecialchars($errorMessage); ?>
        </p>
        <?php endif; ?>

        <?php include ('./header.php') ?>
<title>Login - Inholland Forum</title>
<section id="login">
    <form method="POST" class="form-signin"> 
        <h1 class="h3 mb-3 font-weight-normal">Login</h1>
        <label for="username" class="sr-only">Enter Username/Email address</label>
        <input type="username" name="UserInput" id="username" class="form-control" placeholder="Enter Username/Email address">
        <label for="password" class="sr-only">Password</label>
        <input type="password" name="UserPassword" id="password" class="form-control" placeholder="Enter Password" >
        <button class="btn btn-lg btn-primary btn-block" type="submit">Login</button>
        <p class="mt-5 mb-3 text-muted">Â© 2017-2018</p>
    </form>
</section>
<?php include ('./footer.php') ?>

    public function currentUser($user)
    {
        $_SESSION['username'] = $user->getUsername();
    }
    public function startSession(){
        if (session_status() == PHP_SESSION_NONE) {
            session_start();
            $_SESSION['username'] = null;
    }
    }
    require __DIR__ . '/../switchrouter.php';

$uri = trim($_SERVER['REQUEST_URI'], '/');

$router = new SwitchRouter();
require __DIR__ . '/../patternrouter.php';

$uri = trim($_SERVER['REQUEST_URI'], '/');

$router = new PatternRouter();

onclick="hideIdInURL()"
href="/board/<?php echo urlencode($board->getBoardName());?>/thread"

// Action 2: Make /board display all threads of a board
return fetch('http://localhost/api/board', {
    method: 'GET',
    headers: {
        'Content-Type': 'application/json'
    }
});
    if (!response.ok) {
        
        // Note: We shouldn't actually send detailed backend errors to our clients 
        // in a production environment. Log them in the backend instead.

        const error = await response.text();
        console.log(error);
    }
    
    function testIfComplete($user) {
        $requiredProperties = ['user_id', 'username', 'email', 'password', 'joined_at', 'role_id'];
        $missingProperties = $this->hasIncompleteFields($user, $requiredProperties);
        
        if (empty($missingProperties)) {
            echo "Object is complete";
        } else {
            echo "Incomplete fields: " . implode(', ', $missingProperties);
        }
    }
        function testIfComplete($board) {
        $requiredProperties = ['board_id', 'board_name', 'board_description', 'total_threads', 'total_messages'];
        $missingProperties = $this->hasIncompleteFields($board, $requiredProperties);
        
        if (empty($missingProperties)) {
            echo "Object is complete";
        } else {
            echo "Incomplete fields: " . implode(', ', $missingProperties);
        }
    }
    function hasIncompleteFields($object, $requiredProperties) {
        $objectProperties = array_keys((array)$object);
        $missingProperties = array_diff($requiredProperties, $objectProperties);
        return $missingProperties;
    }
    <script>
    function createThread(user_id) {
    alert('createThread() called');

    // Create an object with the data from the form (title and first_post)
    let formData = {
        title: document.getElementById('threadTitle').value,
        firstPost: document.getElementById('firstPost').value,
        tags: document.getElementById('tags').value
    };

    // Create new thread / Post the data to http://localhost/api/thread using fetch
    fetch('http://localhost/api/thread',
        {
            method: 'POST',
            headers: {
                'Content-type': 'application/json'
            },
            body: JSON.stringify(
                {
                    title: formData.title,
                    firstPost: formData.firstPost,
                    user_id: user_id
                }
            )
        })
        .then(response => { response.json() })
        .then(data => {
            console.log('Success:', data);
            addTags(data.thread_id, formData.tags);
            createFirstPost(data.thread_id, data.first_post, user_id);
        })
        .catch(error => {
            console.error('Error message:', error.message);
            console.error('Error object:', error);
        });
}
</script>
<script>
function addTags(thread_id, tags) 
{
            // Action 2: Turn first post into a post object
            fetch('http://localhost/api/tag', 
            {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(
                    {
                        thread_id: thread_id,
                        tags: tags,
                    }
                )
            })        
            .then(response => { response.json() })
            .then(data => {
                console.log('Success:', data);
            })
            .catch(error => {
                console.error('Error message:', error.message);
                console.error('Error object:', error);
            });
}
</script>
<script>
function createFirstPost(thread_id, first_post, user_id) 
{
    fetch('http://localhost/api/post', 
    {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify(
            {
                thread_id: thread_id,
                message: first_post,
                user_id: user_id
            }
        )
    })
    .then(response => { response.json() })
    .then(data => {
        console.log('Success:', data);
    })
    .catch(error => {
        console.error('Error message:', error.message);
        console.error('Error object:', error);
    });
}
</script>
async function processTags(url, thread_id, tags) {
    try {
        const response = await fetch(`http://localhost/api/${url}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(
                {
                    thread_id: thread_id,
                    tags: tags
                }
            )
        });
        if (!response.ok) {
            const error = await response.text();
            console.log(error);
            throw new Error(`Failed to post data to ${url}`);
        }
        return await response.json();
    } catch (error) {
        console.error('An error occurred:', error.message, 'Stack:', error.stack);
    }
}

async function addTags(thread_id, tags) {
    const tagData = await postData('http://localhost/api/tag', { thread_id, tags });
    console.log('New tags added:', tagData);
    return tagData;
}

async function addThreadTags(thread_id, tags) {
    const threadTags = await postData('http://localhost/api/thread_tag', { thread_id, tags });
    console.log('Tags added to thread:', threadTags);
}
async function addTags(thread_id, tags) {
    try {
        const response = await fetch('http://localhost/api/tag', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                thread_id: thread_id,
                tags: tags
            })
        });
        if (!response.ok) {
            const error = await response.text();
            console.log(error);
            throw new Error('Failed to add tags');
        }
        const tagData = await response.json();
        console.log('New tags added:', tagData);
        return tagData;

    } catch (error) {
        console.error('An error occurred:', error.message, 'Stack:', error.stack);
    }
}
async function addThreadTags(thread_id, thread_tags) {
    try {
        const response = await fetch('http://localhost/api/thread_tag', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                thread_id: thread_id,
                thread_tags: thread_tags
            })
        });
        if (!response.ok) {
            const error = await response.text();
            console.log(error);
            throw new Error('Failed to add thread tags');
        }
        const threadTagData = await response.json();
        console.log('Tags added to thread:', threadTagData);
        
    } catch (error) {
        console.error('An error occurred:', error.message, 'Stack:', error.stack);
    }
}